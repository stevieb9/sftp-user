#!/usr/bin/perl

use warnings;
use strict;
use 5.12.0;

use Getopt::Long;
use Pod::Usage;

my ( $user, $pass, $name );
my $group = 'sftp-only';
my $home;
my $rmuser;
my $shell = '/sbin/nologin';
my $data  = 'data';
my ( $help, $man )  = 0;

my $args = GetOptions (
                    "user|u=s"   => \$user,
                    "pass|p=s"   => \$pass,
                    "group|g=s"  => \$group,
                    "home|h=s"   => \$home,
                    "name|n=s"   => \$name,
                    "shell|s=s"  => \$shell,
                    "data|d=s"   => \$data,
                    "help|?"     => \$help,
                    "man|m"      => \$man,
                    "rmuser|r=s" => \$rmuser,
            );

# dump the help screens

pod2usage({ -verbose => 1 }) if $help;
pod2usage({ -verbose => 2 }) if $man;

# see if anything was supplied on cli

if ( ! $user && ! $rmuser ) {
    print "\n\nUsage information:\n\n";
    pod2usage({ -verbose => 1 });
}

if ( ! $rmuser && defined( getpwnam( $user ))) {
    print "\n\nUser $user already exists... exiting.\n\n";
    exit;
}

# let's check for args

# user's real name... if not supplied, we'll show that

$name = "not supplied" if ! $name;

# home directory

if ( ! $home ) {
    $home = home_dir();
}

# random pass if not supplied on cli

if ( ! $pass ) {
    $pass = random_pass();
}

# delete a user

if ( $rmuser ) {
    if ( ! defined( getpwnam( $rmuser ))){
        print "\n\nUser $rmuser doesn't exist, can't be deleted... exiting.\n\n";
        exit;
    }

    print "\n\nThis will delete user $rmuser. Are you sure you want to continue? [y/N]: ";
    my $delete = <STDIN>;

    if ( $delete =~ /y/i ){
        system( "pw userdel -n $rmuser && rm -r $home" );
        print "\n\nUser $rmuser deleted.\n\n";
    }
    else {
        print "\n\nNo users deleted\n\n";
    }
    exit;
}


# add the user

system( "echo $pass | pw useradd -n $user -c '$name' -s $shell -g $group -h 0 -d $data -m" );

print "\n\nUser $user created. Note their password: $pass\n\n";

# create and own the chroot 

dir_create( $user, $home, $data );

sub random_pass {

    my @valid;
    push @valid, qw( a A b B c C d D e E f F g G h H k K m );
    push @valid, qw( M n N p P r R s S t T w W x X y Y z Z );
    push @valid, qw( 2 3 4 5 6 7 8 9 * ? ! % $ );

    my $length = 8;
    my $pass;

    for ( 1..$length) {
        $pass .= $valid[ int( rand( @valid )) ];
    }
    return $pass;
}
sub home_dir {

    $user = $rmuser if ! $user;
    $home = "/home/$user";
    return $home;
}
sub dir_create {
    
    my ( $user, $home, $data ) = @_;

    my ( $uid, $gid ) = ( getpwnam( $user ) )[ 2,3 ];

    mkdir "$home";
    chown 0, $gid, $home;

    mkdir "$home/$data";
    chown $uid, $gid, "$home/$data";

    unlink "$home/.*";
}

1;

__END__

=head1 NAME

sftpuser - Create chroot-ed SFTP accounts dynamically

=head1 SYNOPSIS

    # basic usage

    sftpuser -u username -p password

    # delete a user

    sftpuser -r username

=head1 DESCRIPTION

sftpuser configures a new SFTP user on OpenSSH servers that are configured to
chroot the users.

=head1 OPTIONS

=item --username | -u

Specify the username of the account you want to create.

=item --password | -p

Specify the password for the new user. If this option is omitted, a random
password will be generated and printed on the screen.

=item --group | -g

Specify the group that locks the new user into the chroot environment. Defaults
to "sftp-user".

=item --home | -h

Specify the chroot environment's home directory. Defaults to "/home".

=item --name | -n

Optionally specify a real name for the new user.

=item --shell | -s

Specify the shell for the chroot-ed user. Defaults to "/sbin/nologin".

=item --data | -d

Specify the users upload/download directory. This will be created under the user's
home directory, and upon logging into the system, the user will be dropped into this
directory by default. Defaults to "data".

=item --rmuser | -r

Specify a user that you want to delete. All of the user's data will be lost.

=item --help | -?

Prints the command line options along with their description.

=item --man | -m

Prints out the entire sftpuser manual page.

=back

=head1 AUTHOR

Steve Bertrand, E<lt>steveb@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012 by Steve Bertrand

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.12.4 or,
at your option, any later version of Perl 5 you may have available.


=cut

